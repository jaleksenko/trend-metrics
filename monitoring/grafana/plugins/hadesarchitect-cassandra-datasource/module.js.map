{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"lodash\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./datasource.ts","webpack:///./QueryEditor.tsx","webpack:///./ConfigEditor.tsx","webpack:///./module.ts","webpack:///./VariableQueryEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__545__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__980__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import _ from 'lodash';\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\nimport {DataQueryRequest, DataQueryResponse, DataSourceInstanceSettings} from '@grafana/data';\nimport { CassandraQuery,CassandraVariableQuery, CassandraDataSourceOptions } from './models';\nimport { Observable } from 'rxjs';\n\nexport class CassandraDatasource extends DataSourceWithBackend<CassandraQuery, CassandraDataSourceOptions> {\n  headers: any;\n  id: number;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<CassandraDataSourceOptions>) {\n    super(instanceSettings);\n\n    this.headers = { 'Content-Type': 'application/json' };\n\n    this.id = instanceSettings.id;\n\n    // annotations default behaviour\n    // https://grafana.com/docs/grafana/latest/developers/plugins/create-a-grafana-plugin/extend-a-plugin/add-support-for-annotations/\n    this.annotations = {};\n  }\n\n  query(options: DataQueryRequest<CassandraQuery>): Observable<DataQueryResponse> {\n    if (this.isEditorMode(options)) {\n      if (!this.isEditorCompleted(options)) {\n        throw new Error('Skipping query execution while not all editor fields are filled');\n      }\n    } else {\n      if (!this.isConfiguratorCompleted(options)) {\n        throw new Error('Skipping query execution while not all configurator fields are filled');\n      }\n    }\n\n    return super.query(this.buildQueryParameters(options));\n  }\n\n  // metricFindQuery implicitly returns array of MetricFindValue objects. It assumed, that\n  // backend returns some compatible type to be correctly used in dashboard variables context.\n  // https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/types/datasource.ts#L595\n  async metricFindQuery(query: CassandraVariableQuery, options?: any) {\n    const response = await this.getResource('variables', {query: query.query});\n    return response;\n  }\n\n  isEditorMode(options: DataQueryRequest<CassandraQuery>): boolean {\n    return !options.targets[0].rawQuery;\n  }\n\n  isEditorCompleted(options: DataQueryRequest<CassandraQuery>): boolean {\n    return Boolean(\n      options.targets[0].keyspace &&\n      options.targets[0].table &&\n      options.targets[0].columnTime &&\n      options.targets[0].columnValue &&\n      options.targets[0].columnId &&\n      options.targets[0].valueId\n    );\n  }\n\n  isConfiguratorCompleted(options: DataQueryRequest<CassandraQuery>): boolean {\n    return Boolean(options.targets[0].target);\n  }\n\n  async getKeyspaces(): Promise<string[]> {\n    return this.getResource('keyspaces');\n  }\n\n  async getTables(keyspace: string): Promise<string[]> {\n    return this.getResource('tables', { keyspace: keyspace });\n  }\n\n  async getColumns(keyspace: string, table: string, needType: string): Promise<string[]> {\n    return this.getResource('columns', {\n      keyspace: keyspace,\n      table: table,\n      needType: needType,\n    });\n  }\n\n  buildQueryParameters(options: DataQueryRequest<CassandraQuery>): DataQueryRequest<CassandraQuery> {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, (target) => {\n      return target.target !== 'select metric';\n    });\n\n    const targets: CassandraQuery[] = _.map(options.targets, (target) => {\n      return {\n        datasourceId: target.datasourceId,\n        queryType: target.queryType,\n\n        target: getTemplateSrv().replace(target.target, options.scopedVars, 'csv'),\n        refId: target.refId,\n        hide: target.hide,\n        rawQuery: target.rawQuery,\n        filtering: target.filtering,\n        keyspace: target.keyspace,\n        table: target.table,\n        columnTime: target.columnTime,\n        columnValue: target.columnValue,\n        columnId: target.columnId,\n        valueId:  getTemplateSrv().replace(target.valueId, options.scopedVars, 'csv'),\n        alias: target.alias,\n        instant: target.instant,\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n","import React, { ChangeEvent, PureComponent, FormEvent } from 'react';\nimport { Button, InlineField, InlineFieldRow, Input, InlineSwitch, Select, TextArea } from '@grafana/ui';\nimport { CoreApp, QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { CassandraDatasource } from './datasource';\nimport { CassandraQuery, CassandraDataSourceOptions } from './models';\n\ntype Props = QueryEditorProps<CassandraDatasource, CassandraQuery, CassandraDataSourceOptions>;\n\nfunction selectable(value?: string): SelectableValue<string> {\n  if (!value) {\n    return {};\n  }\n\n  return { label: value, value: value };\n}\n\nexport class QueryEditor extends PureComponent<Props> {\n  constructor(props: QueryEditorProps<CassandraDatasource, CassandraQuery, CassandraDataSourceOptions>) {\n    super(props);\n\n    const { onChange, query } = this.props;\n    onChange({ ...query, datasourceId: props.datasource.id });\n  }\n\n  onRunQuery(\n    props: Readonly<Props> &\n      Readonly<{\n        children?: React.ReactNode;\n      }>\n  ) {\n    this.props.query.queryType = 'query';\n    if (this.props.app && this.props.app === CoreApp.UnifiedAlerting) {\n      this.props.query.queryType = 'alert';\n    }\n\n    const { onChange, query } = this.props;\n    onChange({ ...query, queryType: props.query.queryType });\n\n    if ((\n      props.query.keyspace &&\n      props.query.keyspace !== '' &&\n      props.query.table &&\n      props.query.table !== '' &&\n      props.query.columnTime &&\n      props.query.columnTime !== '' &&\n      props.query.columnValue &&\n      props.query.columnValue !== '' &&\n      props.query.columnId &&\n      props.query.columnId !== '' &&\n      props.query.valueId &&\n      props.query.valueId !== ''\n      ) || (props.query.target && props.query.target !== ''))\n    {\n      this.props.onRunQuery();\n    }\n  }\n\n  getKeyspaces(): Array<SelectableValue<string>> {\n    const result: Array<SelectableValue<string>> = [];\n    this.props.datasource.getKeyspaces().then((keyspaces: string[]) => {\n      keyspaces.forEach((keyspace: string) => {\n        result.push({ label: keyspace, value: keyspace });\n      });\n    });\n\n    return result;\n  }\n\n  getTables(): Array<SelectableValue<string>> {\n    if (!this.props.query.keyspace) {\n      return [];\n    }\n\n    const result: Array<SelectableValue<string>> = [];\n    this.props.datasource.getTables(this.props.query.keyspace).then((tables: string[]) => {\n      tables.forEach((table: string) => {\n        result.push({ label: table, value: table });\n      });\n    });\n\n    return result;\n  }\n\n  getOptions(needType: string): Array<SelectableValue<string>> {\n    if (!this.props.query.keyspace || !this.props.query.table) {\n      return [];\n    }\n\n    const columnOptions: Array<SelectableValue<string>> = [];\n\n    this.props.datasource\n      .getColumns(this.props.query.keyspace, this.props.query.table, needType)\n      .then((columns: string[]) => {\n        columns.forEach((column: string) => {\n          columnOptions.push({ label: column, value: column });\n        });\n      });\n\n    return columnOptions;\n  }\n\n  onChangeQueryType = () => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, rawQuery: !query.rawQuery });\n  };\n\n  onQueryTextChange = (e: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { onChange, query } = this.props;\n    const { value } = e.target as HTMLInputElement | HTMLTextAreaElement;\n    onChange({ ...query, target: value });\n  };\n\n  onKeyspaceChange = (event: SelectableValue<string>) => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, keyspace: event.value });\n  };\n\n  onTableChange = (event: SelectableValue<string>) => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, table: event.value });\n  };\n\n  onTimeColumnChange = (value: SelectableValue<string>) => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, columnTime: value.value });\n  };\n\n  onValueColumnChange = (event: SelectableValue<string>) => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, columnValue: event.value });\n  };\n\n  onIDColumnChange = (event: SelectableValue<string>) => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, columnId: event.value });\n  };\n\n  onIDValueChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, valueId: event.target.value });\n  };\n\n  onAliasChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, alias: event.target.value });\n  };\n\n  onFilteringChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, filtering: event.target.checked });\n  };\n\n  onInstantChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, instant: event.target.checked });\n  };\n\n  render() {\n    const options = this.props;\n\n    return (\n      <div>\n        {options.query.rawQuery && (\n          <>\n            <InlineFieldRow>\n              <InlineField\n                label=\"Cassandra CQL Query\"\n                labelWidth={30}\n                tooltip=\"Enter Cassandra CQL query. There are $__timeFrom/$__timeTo, $__unixEpochFrom/$__unixEpochTo and $__from/$__to variables to dynamically limit time range in queries. You should always use them to avoid excessive data fetching from DB.\"\n                grow\n              >\n                <TextArea\n                  placeholder={'Enter a CQL query'}\n                  onChange={this.onQueryTextChange}\n                  onBlur={() => {\n                    this.onRunQuery(this.props);\n                  }}\n                  value={this.props.query.target}\n                />\n              </InlineField>\n              <Button icon=\"pen\" variant=\"secondary\" aria-label=\"Toggle editor mode\" onClick={this.onChangeQueryType} />\n            </InlineFieldRow>\n            <InlineFieldRow>\n              <InlineField label=\"Alias\" labelWidth={30} tooltip=\"Series name override. Plain text or template using column names, e.g. `{{ column1 }}:{{ column2}}`\">\n                <Input\n                    name=\"alias\"\n                    onChange={this.onAliasChange}\n                    onBlur={() => {\n                      this.onRunQuery(this.props);\n                    }}\n                    value={this.props.query.alias || ''}\n                />\n              </InlineField>\n            </InlineFieldRow>\n          </>\n        )}\n        {!options.query.rawQuery && (\n          <>\n            <InlineFieldRow>\n              <InlineField label=\"Keyspace\" labelWidth={30} tooltip=\"Specify keyspace to work with\">\n                <Select\n                  allowCustomValue={true}\n                  value={selectable(this.props.query.keyspace)}\n                  placeholder=\"keyspace name\"\n                  onChange={this.onKeyspaceChange}\n                  options={this.getKeyspaces()}\n                  onBlur={() => {\n                    this.onRunQuery(this.props);\n                  }}\n                  width={90}\n                />\n              </InlineField>\n              <Button icon=\"pen\" variant=\"secondary\" aria-label=\"Toggle editor mode\" onClick={this.onChangeQueryType} />\n            </InlineFieldRow>\n            <InlineFieldRow>\n              <InlineField label=\"Table\" labelWidth={30} tooltip=\"Specify table to work with\">\n                <Select\n                  allowCustomValue={true}\n                  value={selectable(this.props.query.table)}\n                  placeholder=\"table name\"\n                  onChange={this.onTableChange}\n                  options={this.getTables()}\n                  onBlur={() => {\n                    this.onRunQuery(this.props);\n                  }}\n                  width={90}\n                />\n              </InlineField>\n            </InlineFieldRow>\n            <InlineFieldRow>\n              <InlineField\n                label=\"Time Column\"\n                labelWidth={30}\n                tooltip=\"Specify name of a timestamp column to identify time (created_at, time etc.)\"\n              >\n                <Select\n                  allowCustomValue={true}\n                  value={selectable(this.props.query.columnTime)}\n                  placeholder=\"time column\"\n                  onChange={this.onTimeColumnChange}\n                  onBlur={() => {\n                    this.onRunQuery(this.props);\n                  }}\n                  options={this.getOptions('timestamp')}\n                  width={90}\n                />\n              </InlineField>\n            </InlineFieldRow>\n            <InlineFieldRow>\n              <InlineField\n                label=\"Value Column\"\n                labelWidth={30}\n                tooltip=\"Specify name of a numeric column to retrieve value (temperature, price etc.)\"\n              >\n                <Select\n                  allowCustomValue={true}\n                  placeholder=\"value column\"\n                  value={selectable(this.props.query.columnValue)}\n                  options={this.getOptions('int')}\n                  onChange={this.onValueColumnChange}\n                  onBlur={() => {\n                    this.onRunQuery(this.props);\n                  }}\n                  width={90}\n                />\n              </InlineField>\n            </InlineFieldRow>\n            <InlineFieldRow>\n              <InlineField\n                label=\"ID Column\"\n                labelWidth={30}\n                tooltip=\"Specify name of a ID column to identify the row (id, sensor_id etc.)\"\n              >\n                <Select\n                  allowCustomValue={true}\n                  placeholder=\"ID column\"\n                  value={selectable(this.props.query.columnId)}\n                  onChange={this.onIDColumnChange}\n                  onBlur={() => {\n                    this.onRunQuery(this.props);\n                  }}\n                  options={this.getOptions('uuid')}\n                  width={90}\n                />\n              </InlineField>\n            </InlineFieldRow>\n            <InlineFieldRow>\n              <InlineField\n                label=\"ID Value\"\n                labelWidth={30}\n                tooltip=\"Specify UUID value of a column to identify the row (f.e. 123e4567-e89b-12d3-a456-426655440000)\"\n              >\n                <Input\n                  name=\"value_column\"\n                  placeholder=\"123e4567-e89b-12d3-a456-426655440000\"\n                  value={this.props.query.valueId || ''}\n                  onChange={this.onIDValueChange}\n                  onBlur={() => {\n                    this.onRunQuery(this.props);\n                  }}\n                  width={90}\n                  required\n                />\n              </InlineField>\n            </InlineFieldRow>\n            <InlineFieldRow>\n              <InlineField label=\"Alias\" labelWidth={30} tooltip=\"Series name override. Plain text or template using column names, e.g. `{{ column1 }}:{{ column2}}`\">\n                <Input\n                  name=\"alias\"\n                  placeholder=\"my alias\"\n                  value={this.props.query.alias || ''}\n                  onChange={this.onAliasChange}\n                  onBlur={() => {\n                    this.onRunQuery(this.props);\n                  }}\n                  width={90}\n                />\n              </InlineField>\n            </InlineFieldRow>\n            <InlineFieldRow>\n              <InlineField\n                  label=\"Instant\"\n                  labelWidth={30}\n                  tooltip=\"Queries only first point for each series(PER PARTITION LIMIT 1)\"\n              >\n                <InlineSwitch\n                    value={this.props.query.instant}\n                    onChange={this.onInstantChange}\n                    onBlur={() => {\n                      this.onRunQuery(this.props);\n                    }}\n                />\n              </InlineField>\n            </InlineFieldRow>\n            <InlineFieldRow>\n              <InlineField\n                label=\"Allow filtering\"\n                labelWidth={30}\n                tooltip=\"Allow Filtering can be dangerous practice and we strongly discourage using it\"\n              >\n                <InlineSwitch\n                  value={this.props.query.filtering}\n                  onChange={this.onFilteringChange}\n                  onBlur={() => {\n                    this.onRunQuery(this.props);\n                  }}\n                />\n              </InlineField>\n            </InlineFieldRow>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { ChangeEvent, PureComponent } from 'react';\nimport { FieldSet, InlineField, InlineFieldRow, Input, LegacyForms, Select, InlineSwitch } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { CassandraDataSourceOptions } from './models';\n\nconst { SecretFormField } = LegacyForms;\n\ntype Props = DataSourcePluginOptionsEditorProps<CassandraDataSourceOptions, Record<string, unknown>>;\n\ninterface State {}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  onHostChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.target.value === '') {\n      event.target.setCustomValidity('Cannot be empty');\n      event.target.placeholder = 'This field cannot be empty!';\n      event.target.style.setProperty('border-color', 'red');\n    } else {\n      event.target.setCustomValidity('');\n      event.target.placeholder = 'cassandra:9042';\n      event.target.style.setProperty('border-color', '');\n    }\n    const { onOptionsChange, options } = this.props;\n    const url = event.target.value;\n    onOptionsChange({ ...options, url });\n  };\n\n  onKeyspaceChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      keyspace: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onAPIKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        apiKey: event.target.value,\n      },\n    });\n  };\n\n  onUserChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      user: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onTimeoutChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      timeout: Number(event.target.value),\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onUseCustomTLSChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      useCustomTLS: event.currentTarget.checked,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onPasswordReset = () => {\n    const { onOptionsChange, options } = this.props;\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...options.secureJsonFields,\n        password: false,\n      },\n      secureJsonData: {\n        ...options.secureJsonData,\n        password: '',\n      },\n    });\n  };\n\n  onPasswordChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...options.secureJsonFields,\n        password: true,\n      },\n      secureJsonData: {\n        ...options.secureJsonData,\n        password: event.target.value,\n      },\n    });\n  };\n\n  render() {\n    const { onOptionsChange, options } = this.props;\n    const { jsonData } = options;\n\n    const consistencyOptions = [\n      { label: 'ONE', value: 'ONE' },\n      { label: 'TWO', value: 'TWO' },\n      { label: 'THREE', value: 'THREE' },\n      { label: 'QUORUM', value: 'QUORUM' },\n      { label: 'ALL', value: 'ALL' },\n      { label: 'LOCAL_QUORUM', value: 'LOCAL_QUORUM' },\n      { label: 'EACH_QUORUM', value: 'EACH_QUORUM' },\n      { label: 'LOCAL_ONE', value: 'LOCAL_ONE' },\n    ];\n\n    if (!this.props.options.jsonData.consistency || this.props.options.jsonData.consistency === '') {\n      this.props.options.jsonData.consistency = consistencyOptions[0].value;\n    }\n\n    return (\n      <>\n        <FieldSet label=\"Connection settings\">\n          <InlineFieldRow>\n            <InlineField\n              label=\"Host\"\n              labelWidth={20}\n              tooltip=\"Specify host and port like `192.168.12.134:9042`. You can specify multiple contact points using semicolon, f.e. `host1:9042;host2:9042;host3:9042`\"\n            >\n              <Input\n                name=\"host\"\n                value={options.url || ''}\n                placeholder=\"cassandra:9042\"\n                invalid={options.url === ''}\n                onChange={this.onHostChange}\n                width={60}\n              />\n            </InlineField>\n          </InlineFieldRow>\n          <InlineFieldRow>\n            <InlineField label=\"Keyspace\" labelWidth={20}>\n              <Input\n                name=\"keyspace\"\n                value={options.jsonData.keyspace}\n                placeholder=\"keyspace name\"\n                onChange={this.onKeyspaceChange}\n                width={60}\n              />\n            </InlineField>\n          </InlineFieldRow>\n          <InlineFieldRow>\n            <InlineField label=\"Consistency\" labelWidth={20}>\n              <Select\n                placeholder=\"choose consistensy\"\n                options={consistencyOptions}\n                isClearable={false}\n                isSearchable={true}\n                value={options.jsonData.consistency || consistencyOptions[0]}\n                onChange={(value) => {\n                  jsonData.consistency = value.value!;\n                  onOptionsChange({ ...options, jsonData });\n                }}\n                width={60}\n              />\n            </InlineField>\n          </InlineFieldRow>\n          <InlineFieldRow>\n            <InlineField\n              label=\"Credentials\"\n              tooltip=\"We strongly recommend to create a custom Cassandra user for Grafana with strictly read-only permissions!\"\n              labelWidth={20}\n            >\n              <Input\n                name=\"user\"\n                placeholder=\"user\"\n                value={options.jsonData.user}\n                invalid={options.jsonData.user === ''}\n                onChange={this.onUserChange}\n                width={25}\n              />\n            </InlineField>\n            <InlineField>\n              <SecretFormField\n                isConfigured={false}\n                value={(options.secureJsonData?.password as string) || ''}\n                onReset={this.onPasswordReset}\n                onChange={this.onPasswordChange}\n                labelWidth={5}\n              />\n            </InlineField>\n          </InlineFieldRow>\n          <InlineFieldRow>\n            <InlineField label=\"Timeout\" labelWidth={20} tooltip=\"Timeout in seconds. Keep empty for the default value\">\n              <Input\n                name=\"timeout\"\n                placeholder=\"\"\n                type=\"number\"\n                step={1}\n                value={options.jsonData.timeout}\n                onChange={this.onTimeoutChange}\n                width={60}\n              />\n            </InlineField>\n          </InlineFieldRow>\n        </FieldSet>\n        <FieldSet label=\"TLS Settings\">\n          <InlineFieldRow>\n            <InlineField\n              label=\"Custom TLS settings\"\n              tooltip=\"Enable if you need custom TLS configuration (usually required using AstraDB, AWS Keyspaces etc.)\"\n              labelWidth={30}\n            >\n              <InlineSwitch value={options.jsonData.useCustomTLS} onChange={this.onUseCustomTLSChange} />\n            </InlineField>\n          </InlineFieldRow>\n          <InlineFieldRow>\n            <InlineField\n              label=\"Allow self-signed certificates\"\n              labelWidth={30}\n              tooltip=\"Enable `custom TLS settings` to allow self-signed certificates\"\n              disabled={!options.jsonData.useCustomTLS}\n            >\n              <InlineSwitch\n                value={options.jsonData.allowInsecureTLS}\n                onChange={(event: React.FormEvent<HTMLInputElement>) => {\n                  const jsonData = {\n                    ...options.jsonData,\n                    allowInsecureTLS: event.currentTarget.checked,\n                  };\n                  onOptionsChange({ ...options, jsonData });\n                }}\n              />\n            </InlineField>\n          </InlineFieldRow>\n          <InlineFieldRow>\n            <InlineField\n              label=\"Certificate Path\"\n              labelWidth={30}\n              disabled={!options.jsonData.useCustomTLS}\n              tooltip=\"Enable `custom TLS settings` to configure certificates\"\n            >\n              <Input\n                value={options.jsonData.certPath}\n                placeholder=\"certificate path\"\n                onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                  const jsonData = {\n                    ...options.jsonData,\n                    certPath: event.currentTarget.value,\n                  };\n                  onOptionsChange({ ...options, jsonData });\n                }}\n                width={60}\n              />\n            </InlineField>\n          </InlineFieldRow>\n          <InlineFieldRow>\n            <InlineField\n              label=\"Root Certificate Path\"\n              labelWidth={30}\n              disabled={!options.jsonData.useCustomTLS}\n              tooltip=\"Enable `custom TLS settings` to configure certificates\"\n            >\n              <Input\n                value={options.jsonData.rootPath}\n                placeholder=\"root certificate path\"\n                onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                  const jsonData = {\n                    ...options.jsonData,\n                    rootPath: event.currentTarget.value,\n                  };\n                  onOptionsChange({ ...options, jsonData });\n                }}\n                width={60}\n              />\n            </InlineField>\n          </InlineFieldRow>\n          <InlineFieldRow>\n            <InlineField\n              label=\"RootCA Certificate Path\"\n              labelWidth={30}\n              disabled={!options.jsonData.useCustomTLS}\n              tooltip=\"Enable `custom TLS settings` to configure certificates\"\n            >\n              <Input\n                value={options.jsonData.caPath}\n                placeholder=\"CA certificate path\"\n                onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                  const jsonData = {\n                    ...options.jsonData,\n                    caPath: event.currentTarget.value,\n                  };\n                  onOptionsChange({ ...options, jsonData });\n                }}\n                width={60}\n              />\n            </InlineField>\n          </InlineFieldRow>\n        </FieldSet>\n      </>\n    );\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { CassandraDatasource } from './datasource';\nimport { CassandraQuery,CassandraDataSourceOptions } from './models';\nimport { QueryEditor } from './QueryEditor';\nimport { VariableQueryEditor } from './VariableQueryEditor';\nimport { ConfigEditor } from './ConfigEditor';\n\nexport const plugin = new DataSourcePlugin<CassandraDatasource, CassandraQuery, CassandraDataSourceOptions>(\n  CassandraDatasource\n)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setVariableQueryEditor(VariableQueryEditor); // Deprecated, but there is no documentation on the new approach available atm.\n","import React, { useState } from 'react';\nimport { CassandraVariableQuery } from './models';\nimport { TextArea } from '@grafana/ui';\n\ninterface VariableQueryProps {\n  query: CassandraVariableQuery;\n  onChange: (query: CassandraVariableQuery, definition: string) => void;\n}\n\nexport const VariableQueryEditor = ({ onChange, query }: VariableQueryProps) => {\n  const [state, setState] = useState(query);\n\n  const saveQuery = () => {\n    onChange(state, `${state.query}`);\n  };\n\n  const handleChange = (event: React.FormEvent<HTMLTextAreaElement>) =>\n    setState({\n      ...state,\n      [event.currentTarget.name]: event.currentTarget.value,\n    });\n\n  return (\n    <>\n        <label className=\"small\">Specify a query that returns variable values and, optionally, their labels. Only strings are allowed here, so use CAST(column as text) if needed. First returned column interpreted as a value and second as a label. Labels should be used in cases when there is an intention to hide exact variable values behind human-readable names in the Grafana UI.</label>\n        <br />\n        <TextArea\n          name=\"query\"\n          className=\"gf-form-input\"\n          onBlur={saveQuery}\n          onChange={handleChange}\n          value={state.query}\n          placeholder={'SELECT sensor_id, location FROM sensors.sensors_locations'}\n        />\n    </>\n  );\n};\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__545__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__980__","__WEBPACK_EXTERNAL_MODULE__650__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","CassandraDatasource","DataSourceWithBackend","query","options","this","isEditorMode","isEditorCompleted","Error","isConfiguratorCompleted","super","buildQueryParameters","metricFindQuery","getResource","targets","rawQuery","Boolean","keyspace","table","columnTime","columnValue","columnId","valueId","target","getKeyspaces","getTables","getColumns","needType","_","datasourceId","queryType","getTemplateSrv","replace","scopedVars","refId","hide","filtering","alias","instant","constructor","instanceSettings","headers","id","annotations","selectable","label","QueryEditor","PureComponent","onRunQuery","props","app","CoreApp","UnifiedAlerting","onChange","result","datasource","then","keyspaces","forEach","push","tables","getOptions","columnOptions","columns","column","render","div","InlineFieldRow","InlineField","labelWidth","tooltip","grow","TextArea","placeholder","onQueryTextChange","onBlur","Button","icon","variant","aria-label","onClick","onChangeQueryType","Input","name","onAliasChange","Select","allowCustomValue","onKeyspaceChange","width","onTableChange","onTimeColumnChange","onValueColumnChange","onIDColumnChange","onIDValueChange","required","InlineSwitch","onInstantChange","onFilteringChange","e","event","checked","SecretFormField","LegacyForms","ConfigEditor","onOptionsChange","jsonData","consistencyOptions","consistency","FieldSet","url","invalid","onHostChange","isClearable","isSearchable","user","onUserChange","isConfigured","secureJsonData","password","onReset","onPasswordReset","onPasswordChange","type","step","timeout","onTimeoutChange","useCustomTLS","onUseCustomTLSChange","disabled","allowInsecureTLS","currentTarget","certPath","rootPath","caPath","setCustomValidity","style","setProperty","onAPIKeyChange","apiKey","Number","secureJsonFields","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor","setVariableQueryEditor","state","setState","useState","className","br"],"sourceRoot":""}